pipeline { 

// citests agents used to build and test repo.
    agent {
	label 'waveci'
    }
  parameters {  
        booleanParam(name: "ENABLE_ARCH", defaultValue: true, description: "Select whether to enable testing for Archlinux.")
		booleanParam(name: "ENABLE_UBUNTU", defaultValue: true, description: "Select whether to enable testing for Ubuntu 20.04.")
		booleanParam(name: "ENABLE_ORACLE", defaultValue: true, description: "Select whether to enable testing for Oracle Linux 8.")
    stages {

                stage('Arch Testing'){  
                 when {
                          expression {params.ENABLE_ARCH == true}
                     }
                    options {
                    timeout(time: 3, unit: "HOURS")
                    } 
                    steps {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script{
                    dir("${env.WORKSPACE}/Testing/Arch") {
                    dockerImageArch = docker.build("arch:$BUILD_NUMBER", "--network host .")
                    }
                    }
                    }
                    }
                    }
                    


                stage('Ubuntu Testing'){   
                when {
                          expression {params.ENABLE_UBUNTU == true}
                     }
                    options {
                    timeout(time: 3, unit: "HOURS")
                    } 
                    steps {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script{
                    dir("${env.WORKSPACE}/Testing/Ubuntu") {
                   dockerImageUbuntu = docker.build("ubuntu:$BUILD_NUMBER", "--network host .")
                    }
                    }
                    }
                    }
                    }


               stage('Oracle Testing'){    
               when {
                          expression {params.ENABLE_ORACLE == true}
                     }
                    options {
                    timeout(time: 3, unit: "HOURS")
                        } 
                    steps {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script{
                        dir("${env.WORKSPACE}/Testing/Oracle") {
                             dockerImageOracle = docker.build("oracle:$BUILD_NUMBER", "--network host .")
                    }
                    }
                    }
                    }
                    }
}

post {
   always{
        script{
        sh "docker stop \$(docker ps -a -q) && docker system prune -a -f"
}
}
}
}
